<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EDA探索性分析+聚类算法构建用户画像</title>
    <url>/2021/04/04/EDA%E6%8E%A2%E7%B4%A2%E6%80%A7%E5%88%86%E6%9E%90+%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E6%9E%84%E5%BB%BA%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先对数据进行EDA探索性分析，分析不同信用分类的客户主要差异体现在哪些方面，并对这些差异进行检验；应用重要特征或所有特征构建统计模型或机器学习算法，并应用于实际业务的科学决策。</span><br></pre></td></tr></table></figure>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">按照信用分类把训练数据集(training.csv)中的客户分成两个群体，一类群体的信用分类为：差，一类群体的信用分类为：好。请对信用分类为差的客户群体进行客户细分，并给出不同客户细分群体的用户画像。</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">import seaborn as sns</span><br><span class="line">from pandas_profiling import ProfileReport</span><br><span class="line">from sklearn import metrics</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line">sys.path.append(<span class="string">&#x27;D:/&#x27;</span>)</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;D:/training.csv&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="comment">#原数据</span></span><br><span class="line">data</span><br><span class="line"><span class="comment">#信用分类为“好”</span></span><br><span class="line">data2 = data[data[<span class="string">&#x27;信用分类&#x27;</span>] == 1][[<span class="string">&#x27;编号&#x27;</span>,<span class="string">&#x27;信用卡账户状态&#x27;</span>,<span class="string">&#x27;信用卡到期期限&#x27;</span>,<span class="string">&#x27;信用卡历史信息&#x27;</span>,<span class="string">&#x27;贷款目的&#x27;</span>,<span class="string">&#x27;活期账户余额&#x27;</span>,<span class="string">&#x27;非活期账户余额&#x27;</span>,<span class="string">&#x27;受雇佣状况&#x27;</span>,<span class="string">&#x27;分期付款比例&#x27;</span>,<span class="string">&#x27;婚姻与性别&#x27;</span>,<span class="string">&#x27;担保人&#x27;</span>,<span class="string">&#x27;居住时间&#x27;</span>,<span class="string">&#x27;财产&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;其他分期付款计划&#x27;</span>,<span class="string">&#x27;住房情况&#x27;</span>,<span class="string">&#x27;信用卡数&#x27;</span>,<span class="string">&#x27;工作状态&#x27;</span>,<span class="string">&#x27;无工作的家庭成员人数&#x27;</span>,<span class="string">&#x27;注册电话是否在使用&#x27;</span>,<span class="string">&#x27;是否为外国人&#x27;</span>,<span class="string">&#x27;信用分类&#x27;</span>]]</span><br><span class="line"><span class="comment">#信用分类为“差”</span></span><br><span class="line">data3 = data[data[<span class="string">&#x27;信用分类&#x27;</span>] == 0][[<span class="string">&#x27;编号&#x27;</span>,<span class="string">&#x27;信用卡账户状态&#x27;</span>,<span class="string">&#x27;信用卡到期期限&#x27;</span>,<span class="string">&#x27;信用卡历史信息&#x27;</span>,<span class="string">&#x27;贷款目的&#x27;</span>,<span class="string">&#x27;活期账户余额&#x27;</span>,<span class="string">&#x27;非活期账户余额&#x27;</span>,<span class="string">&#x27;受雇佣状况&#x27;</span>,<span class="string">&#x27;分期付款比例&#x27;</span>,<span class="string">&#x27;婚姻与性别&#x27;</span>,<span class="string">&#x27;担保人&#x27;</span>,<span class="string">&#x27;居住时间&#x27;</span>,<span class="string">&#x27;财产&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;其他分期付款计划&#x27;</span>,<span class="string">&#x27;住房情况&#x27;</span>,<span class="string">&#x27;信用卡数&#x27;</span>,<span class="string">&#x27;工作状态&#x27;</span>,<span class="string">&#x27;无工作的家庭成员人数&#x27;</span>,<span class="string">&#x27;注册电话是否在使用&#x27;</span>,<span class="string">&#x27;是否为外国人&#x27;</span>,<span class="string">&#x27;信用分类&#x27;</span>]]</span><br><span class="line">data_rename=data.rename(columns=&#123;<span class="string">&#x27;编号&#x27;</span>:<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;信用卡账户状态&#x27;</span>:<span class="string">&#x27;credit card account status&#x27;</span>, <span class="string">&#x27;信用卡到期期限&#x27;</span>:<span class="string">&#x27;credit card maturity&#x27;</span>, <span class="string">&#x27;信用卡历史信息&#x27;</span>:<span class="string">&#x27;credit card history&#x27;</span>, <span class="string">&#x27;贷款目的&#x27;</span>:<span class="string">&#x27; loan purpose&#x27;</span>, <span class="string">&#x27;活期账户余额&#x27;</span>:<span class="string">&#x27;current account balance&#x27;</span>, <span class="string">&#x27;非活期账户余额&#x27;</span>:<span class="string">&#x27; non current account balance&#x27;</span>, <span class="string">&#x27;受雇佣状况&#x27;</span>:<span class="string">&#x27;employment status&#x27;</span>, <span class="string">&#x27;分期付款比例&#x27;</span>:<span class="string">&#x27;installment ratio&#x27;</span>, <span class="string">&#x27;婚姻与性别&#x27;</span>:<span class="string">&#x27;marriage and gender&#x27;</span>, <span class="string">&#x27;担保人&#x27;</span>:<span class="string">&#x27;guarantor&#x27;</span>, <span class="string">&#x27;居住时间&#x27;</span>:<span class="string">&#x27;residence time&#x27;</span>, <span class="string">&#x27;财产&#x27;</span>:<span class="string">&#x27;property&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>:<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;其他分期付款计划&#x27;</span>:<span class="string">&#x27;other installment plans&#x27;</span>, <span class="string">&#x27;住房情况&#x27;</span>:<span class="string">&#x27;housing situation&#x27;</span>, <span class="string">&#x27;信用卡数&#x27;</span>:<span class="string">&#x27;number of credit cards&#x27;</span>, <span class="string">&#x27;工作状态&#x27;</span>:<span class="string">&#x27;working status&#x27;</span>, <span class="string">&#x27;无工作的家庭成员人数&#x27;</span>:<span class="string">&#x27;number of unemployed family members&#x27;</span>, <span class="string">&#x27;注册电话是否在使用&#x27;</span>:<span class="string">&#x27;is the registration phone in use&#x27;</span>, <span class="string">&#x27;是否为外国人&#x27;</span>:<span class="string">&#x27;Is it a foreigner&#x27;</span>, <span class="string">&#x27;信用分类&#x27;</span>:<span class="string">&#x27;credit classification&#x27;</span>&#125;, inplace = False)</span><br><span class="line">data3_rename=data3.rename(columns=&#123;<span class="string">&#x27;编号&#x27;</span>:<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;信用卡账户状态&#x27;</span>:<span class="string">&#x27;credit card account status&#x27;</span>, <span class="string">&#x27;信用卡到期期限&#x27;</span>:<span class="string">&#x27;credit card maturity&#x27;</span>, <span class="string">&#x27;信用卡历史信息&#x27;</span>:<span class="string">&#x27;credit card history&#x27;</span>, <span class="string">&#x27;贷款目的&#x27;</span>:<span class="string">&#x27; loan purpose&#x27;</span>, <span class="string">&#x27;活期账户余额&#x27;</span>:<span class="string">&#x27;current account balance&#x27;</span>, <span class="string">&#x27;非活期账户余额&#x27;</span>:<span class="string">&#x27; non current account balance&#x27;</span>, <span class="string">&#x27;受雇佣状况&#x27;</span>:<span class="string">&#x27;employment status&#x27;</span>, <span class="string">&#x27;分期付款比例&#x27;</span>:<span class="string">&#x27;installment ratio&#x27;</span>, <span class="string">&#x27;婚姻与性别&#x27;</span>:<span class="string">&#x27;marriage and gender&#x27;</span>, <span class="string">&#x27;担保人&#x27;</span>:<span class="string">&#x27;guarantor&#x27;</span>, <span class="string">&#x27;居住时间&#x27;</span>:<span class="string">&#x27;residence time&#x27;</span>, <span class="string">&#x27;财产&#x27;</span>:<span class="string">&#x27;property&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>:<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;其他分期付款计划&#x27;</span>:<span class="string">&#x27;other installment plans&#x27;</span>, <span class="string">&#x27;住房情况&#x27;</span>:<span class="string">&#x27;housing situation&#x27;</span>, <span class="string">&#x27;信用卡数&#x27;</span>:<span class="string">&#x27;number of credit cards&#x27;</span>, <span class="string">&#x27;工作状态&#x27;</span>:<span class="string">&#x27;working status&#x27;</span>, <span class="string">&#x27;无工作的家庭成员人数&#x27;</span>:<span class="string">&#x27;number of unemployed family members&#x27;</span>, <span class="string">&#x27;注册电话是否在使用&#x27;</span>:<span class="string">&#x27;is the registration phone in use&#x27;</span>, <span class="string">&#x27;是否为外国人&#x27;</span>:<span class="string">&#x27;Is it a foreigner&#x27;</span>&#125;, inplace = False)</span><br><span class="line">data_new=data3[[<span class="string">&#x27;信用卡账户状态&#x27;</span>,<span class="string">&#x27;信用卡到期期限&#x27;</span>,<span class="string">&#x27;信用卡历史信息&#x27;</span>,<span class="string">&#x27;贷款目的&#x27;</span>,<span class="string">&#x27;活期账户余额&#x27;</span>,<span class="string">&#x27;非活期账户余额&#x27;</span>,<span class="string">&#x27;受雇佣状况&#x27;</span>,<span class="string">&#x27;分期付款比例&#x27;</span>,<span class="string">&#x27;婚姻与性别&#x27;</span>,<span class="string">&#x27;担保人&#x27;</span>,<span class="string">&#x27;居住时间&#x27;</span>,<span class="string">&#x27;财产&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;其他分期付款计划&#x27;</span>,<span class="string">&#x27;住房情况&#x27;</span>,<span class="string">&#x27;信用卡数&#x27;</span>,<span class="string">&#x27;工作状态&#x27;</span>,<span class="string">&#x27;无工作的家庭成员人数&#x27;</span>,<span class="string">&#x27;注册电话是否在使用&#x27;</span>,<span class="string">&#x27;是否为外国人&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看各变量的分布、变量之间的关系等</span></span><br><span class="line">profile = ProfileReport(data_rename, title=<span class="string">&#x27;EDA&#x27;</span>, explorative=True)</span><br><span class="line">profile.to_widgets()</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/PKQng3wTeEYAuHv.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算并查看各自变量与因变量“信用分类”之间的相关系数</span></span><br><span class="line">data_pers=data.corr()</span><br><span class="line">m=data_pers[<span class="string">&#x27;信用分类&#x27;</span>][1:21]</span><br><span class="line">m</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">信用卡账户状态       0.353854</span><br><span class="line">信用卡到期期限      -0.199242</span><br><span class="line">信用卡历史信息       0.213281</span><br><span class="line">贷款目的          0.014211</span><br><span class="line">活期账户余额       -0.170184</span><br><span class="line">非活期账户余额       0.205494</span><br><span class="line">受雇佣状况         0.145174</span><br><span class="line">分期付款比例       -0.028143</span><br><span class="line">婚姻与性别         0.096241</span><br><span class="line">担保人           0.010384</span><br><span class="line">居住时间          0.016530</span><br><span class="line">财产           -0.123056</span><br><span class="line">年龄            0.115475</span><br><span class="line">其他分期付款计划      0.108177</span><br><span class="line">住房情况          0.064539</span><br><span class="line">信用卡数          0.032262</span><br><span class="line">工作状态         -0.028905</span><br><span class="line">无工作的家庭成员人数    0.008437</span><br><span class="line">注册电话是否在使用     0.013703</span><br><span class="line">是否为外国人       -0.067509</span><br><span class="line">Name: 信用分类, dtype: float64</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绘制各自变量与“信用分类”的相关性条形图</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;KaiTi&quot;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = False</span><br><span class="line">plt.barh(range(len(m)),m,</span><br><span class="line">        color=[<span class="string">&#x27;steelblue&#x27;</span> <span class="keyword">if</span> i&lt;0 <span class="keyword">else</span> <span class="string">&#x27;black&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> m],</span><br><span class="line">        alpha=0.6)</span><br><span class="line">plt.yticks(range(len(m)),m.index)</span><br><span class="line">plt.title(<span class="string">&#x27;各变量与信用分类的相关性&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/PA6Np3tfay9eM1b.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注册电话是否在使用,无工作的家庭成员人数,担保人,居住时间，贷款目的等属性和信用分类的相关性较小</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用K-Means聚类，聚类个数设置循环（2，20）并计算轮廓系数，绘制轮廓系数折线图，找到最佳轮廓系数对应的个数。</span></span><br><span class="line">new_1=[]</span><br><span class="line">new_2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(18):</span><br><span class="line">    kmeans= KMeans(n_clusters=(2+i))</span><br><span class="line">    kmeans.fit(data_new)</span><br><span class="line">    pre= kmeans.predict(data_new)</span><br><span class="line">    score=metrics.silhouette_score(data_new,pre)</span><br><span class="line">    new_1.append(score)</span><br><span class="line">    new_2.append(2+i)</span><br><span class="line">new_1</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[0.7112815125961607,</span><br><span class="line"> 0.6468400333333855,</span><br><span class="line"> 0.6302119337548864,</span><br><span class="line"> 0.630187621357298,</span><br><span class="line"> 0.6012476891315921,</span><br><span class="line"> 0.5952293333316818,</span><br><span class="line"> 0.5929314282222012,</span><br><span class="line"> 0.5995014477177225,</span><br><span class="line"> 0.5995880624539096,</span><br><span class="line"> 0.5871529537142914,</span><br><span class="line"> 0.5869709115729059,</span><br><span class="line"> 0.5871569544353225,</span><br><span class="line"> 0.6042321210148142,</span><br><span class="line"> 0.6026374881093032,</span><br><span class="line"> 0.599794167430394,</span><br><span class="line"> 0.6002159950730597,</span><br><span class="line"> 0.6016139387943552,</span><br><span class="line"> 0.6008280532627394]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df=pd.DataFrame(new_1,index=new_2,columns=[<span class="string">&#x27;轮廓系数&#x27;</span>])</span><br><span class="line">df.plot(grid=True,</span><br><span class="line">       xlim=[2,20])</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/38XIgeKC1uxWTz7.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def f_z(df,*cols):</span><br><span class="line">    df_n = data_new.copy()</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">        u = df_n[col].mean()</span><br><span class="line">        std = df_n[col].std()</span><br><span class="line">        df_n[col+<span class="string">&#x27;_gy&#x27;</span>] = (df_n[col]-u) / std</span><br><span class="line">    <span class="built_in">return</span>(df_n)</span><br><span class="line">df_z = f_z(data_new,<span class="string">&#x27;信用卡账户状态&#x27;</span>,<span class="string">&#x27;信用卡到期期限&#x27;</span>,<span class="string">&#x27;信用卡历史信息&#x27;</span>,<span class="string">&#x27;贷款目的&#x27;</span>,<span class="string">&#x27;活期账户余额&#x27;</span>,<span class="string">&#x27;非活期账户余额&#x27;</span>,<span class="string">&#x27;受雇佣状况&#x27;</span>,<span class="string">&#x27;分期付款比例&#x27;</span>,<span class="string">&#x27;婚姻与性别&#x27;</span>,<span class="string">&#x27;担保人&#x27;</span>,<span class="string">&#x27;居住时间&#x27;</span>,<span class="string">&#x27;财产&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;其他分期付款计划&#x27;</span>,<span class="string">&#x27;住房情况&#x27;</span>,<span class="string">&#x27;信用卡数&#x27;</span>,<span class="string">&#x27;工作状态&#x27;</span>,<span class="string">&#x27;无工作的家庭成员人数&#x27;</span>,<span class="string">&#x27;注册电话是否在使用&#x27;</span>,<span class="string">&#x27;是否为外国人&#x27;</span> )</span><br><span class="line">data_gy=df_z[[<span class="string">&#x27;信用卡账户状态_gy&#x27;</span>,<span class="string">&#x27;信用卡到期期限_gy&#x27;</span>,<span class="string">&#x27;信用卡历史信息_gy&#x27;</span>,<span class="string">&#x27;贷款目的_gy&#x27;</span>,<span class="string">&#x27;活期账户余额_gy&#x27;</span>,<span class="string">&#x27;非活期账户余额_gy&#x27;</span>,<span class="string">&#x27;受雇佣状况_gy&#x27;</span>,<span class="string">&#x27;分期付款比例_gy&#x27;</span>,<span class="string">&#x27;婚姻与性别_gy&#x27;</span>,<span class="string">&#x27;担保人_gy&#x27;</span>,<span class="string">&#x27;居住时间_gy&#x27;</span>,<span class="string">&#x27;财产_gy&#x27;</span>,<span class="string">&#x27;年龄_gy&#x27;</span>,<span class="string">&#x27;其他分期付款计划_gy&#x27;</span>,<span class="string">&#x27;住房情况_gy&#x27;</span>,<span class="string">&#x27;信用卡数_gy&#x27;</span>,<span class="string">&#x27;工作状态_gy&#x27;</span>,<span class="string">&#x27;无工作的家庭成员人数_gy&#x27;</span>,<span class="string">&#x27;注册电话是否在使用_gy&#x27;</span>,<span class="string">&#x27;是否为外国人_gy&#x27;</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用K-Means聚类，聚类个数设置循环（2，20）并计算轮廓系数，绘制轮廓系数折线图，找到最佳轮廓系数对应的个数。</span></span><br><span class="line">new_3=[]</span><br><span class="line">new_4=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(18):</span><br><span class="line">    kmeans= KMeans(n_clusters=(2+i))</span><br><span class="line">    kmeans.fit(data_gy)</span><br><span class="line">    pre= kmeans.predict(data_gy)</span><br><span class="line">    score=metrics.silhouette_score(data_gy,pre)</span><br><span class="line">    new_3.append(score)</span><br><span class="line">    new_4.append(2+i)</span><br><span class="line">new_3</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[0.11891332108889097,</span><br><span class="line"> 0.10959976121304074,</span><br><span class="line"> 0.1001082949209708,</span><br><span class="line"> 0.0719266562570434,</span><br><span class="line"> 0.0976259943645938,</span><br><span class="line"> 0.06982362343337445,</span><br><span class="line"> 0.0612618129610638,</span><br><span class="line"> 0.05719042759661458,</span><br><span class="line"> 0.07672131358511249,</span><br><span class="line"> 0.05738434419577747,</span><br><span class="line"> 0.06258936459074073,</span><br><span class="line"> 0.05660777857918606,</span><br><span class="line"> 0.06127947922877476,</span><br><span class="line"> 0.06143230884832628,</span><br><span class="line"> 0.06535463283124245,</span><br><span class="line"> 0.0733794314327241,</span><br><span class="line"> 0.06389703786593477,</span><br><span class="line"> 0.07333760129433917]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df=pd.DataFrame(new_3,index=new_4,columns=[<span class="string">&#x27;轮廓系数&#x27;</span>])</span><br><span class="line">df.plot(grid=True,</span><br><span class="line">       xlim=[2,20])</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/s24en1gb3h7Ktpz.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选取非归一化数据</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kmeans= KMeans(n_clusters=2)</span><br><span class="line">kmeans.fit(data_new)</span><br><span class="line">pre= kmeans.predict(data_new)</span><br><span class="line">cen=kmeans.cluster_centers_</span><br><span class="line">cen</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array([[1.89005236e+00, 2.22094241e+01, 2.19895288e+00, 2.54450262e+00,</span><br><span class="line">        1.85561466e+04, 1.56020942e+00, 3.01570681e+00, 3.15706806e+00,</span><br><span class="line">        2.54973822e+00, 1.12041885e+00, 2.72774869e+00, 2.38219895e+00,</span><br><span class="line">        3.13979058e+01, 2.56544503e+00, 1.83769634e+00, 1.35078534e+00,</span><br><span class="line">        2.84816754e+00, 1.84293194e+00, 1.28795812e+00, 1.98952880e+00],</span><br><span class="line">       [1.92592593e+00, 3.70370370e+01, 2.11111111e+00, 3.57407407e+00,</span><br><span class="line">        7.74500741e+04, 1.77777778e+00, 3.42592593e+00, 2.53703704e+00,</span><br><span class="line">        2.59259259e+00, 1.14814815e+00, 2.90740741e+00, 3.12962963e+00,</span><br><span class="line">        3.67407407e+01, 2.44444444e+00, 2.00000000e+00, 1.46296296e+00,</span><br><span class="line">        3.24074074e+00, 1.88888889e+00, 1.72222222e+00, 1.96296296e+00]])</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">da=pd.DataFrame(cen,index=[[<span class="string">&#x27;一类用户&#x27;</span>,<span class="string">&#x27;二类用户&#x27;</span>]],columns=[[<span class="string">&#x27;信用卡账户状态&#x27;</span>,<span class="string">&#x27;信用卡到期期限&#x27;</span>,<span class="string">&#x27;信用卡历史信息&#x27;</span>,<span class="string">&#x27;贷款目的&#x27;</span>,<span class="string">&#x27;活期账户余额&#x27;</span>,<span class="string">&#x27;非活期账户余额&#x27;</span>,<span class="string">&#x27;受雇佣状况&#x27;</span>,<span class="string">&#x27;分期付款比例&#x27;</span>,<span class="string">&#x27;婚姻与性别&#x27;</span>,<span class="string">&#x27;担保人&#x27;</span>,<span class="string">&#x27;居住时间&#x27;</span>,<span class="string">&#x27;财产&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;其他分期付款计划&#x27;</span>,<span class="string">&#x27;住房情况&#x27;</span>,<span class="string">&#x27;信用卡数&#x27;</span>,<span class="string">&#x27;工作状态&#x27;</span>,<span class="string">&#x27;无工作的家庭成员人数&#x27;</span>,<span class="string">&#x27;注册电话是否在使用&#x27;</span>,<span class="string">&#x27;是否为外国人&#x27;</span>]])</span><br><span class="line">da</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/Aj7eR8GpWFPBkMt.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data5=[]</span><br><span class="line">data6=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(20):</span><br><span class="line">    x=da.iloc[0,i]</span><br><span class="line">    y=da.iloc[1,i]</span><br><span class="line">    proportion=x/(x+y)</span><br><span class="line">    data5.append(proportion)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(20):</span><br><span class="line">    x=da.iloc[0,i]</span><br><span class="line">    y=da.iloc[1,i]</span><br><span class="line">    proportion=y/(x+y)</span><br><span class="line">    data6.append(proportion)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data7=[data5,data6]</span><br><span class="line">pro_data=pd.DataFrame(data7,index=[[<span class="string">&#x27;一类用户&#x27;</span>,<span class="string">&#x27;二类用户&#x27;</span>]],columns=[[<span class="string">&#x27;信用卡账户状态&#x27;</span>,<span class="string">&#x27;信用卡到期期限&#x27;</span>,<span class="string">&#x27;信用卡历史信息&#x27;</span>,<span class="string">&#x27;贷款目的&#x27;</span>,<span class="string">&#x27;活期账户余额&#x27;</span>,<span class="string">&#x27;非活期账户余额&#x27;</span>,<span class="string">&#x27;受雇佣状况&#x27;</span>,<span class="string">&#x27;分期付款比例&#x27;</span>,<span class="string">&#x27;婚姻与性别&#x27;</span>,<span class="string">&#x27;担保人&#x27;</span>,<span class="string">&#x27;居住时间&#x27;</span>,<span class="string">&#x27;财产&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;其他分期付款计划&#x27;</span>,<span class="string">&#x27;住房情况&#x27;</span>,<span class="string">&#x27;信用卡数&#x27;</span>,<span class="string">&#x27;工作状态&#x27;</span>,<span class="string">&#x27;无工作的家庭成员人数&#x27;</span>,<span class="string">&#x27;注册电话是否在使用&#x27;</span>,<span class="string">&#x27;是否为外国人&#x27;</span>]])</span><br><span class="line">pro_data</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/b38ECmVcwn6IpDH.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%matplotlib qt5</span><br><span class="line">pro_data.plot(kind=<span class="string">&#x27;barh&#x27;</span>,</span><br><span class="line">             grid=True)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/xvCz6R2MgWJtEeb.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">中低端客户：高贡献高风险的客户</span><br><span class="line">低端客户：低贡献高风险客户</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>任务记录</category>
      </categories>
      <tags>
        <tag>任务记录</tag>
      </tags>
  </entry>
  <entry>
    <title>WE</title>
    <url>/2022/03/30/zz&amp;ll/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2814bd22aa70622e051c465d306f7657207dcacf0228337f12f457e438f7766f">086e40662a6e3f52ac068bff03bd2acbea0889ed423c5da22c613454fde274c4018a296c0ffff52e03505ba387e07dacd98653ecd06a54faaf94e6048f2146c62f312651355aaabf97e7391376bc0112f6f18ec3e36ad7d03d141d5cadeccac6f148074403b1ca86d92f10dcd2e0d2c5edbf62a33e49ac67bc1e942fc654a79bb42ebc422f071792128b6f05dce14e64b083e314ea429cc52e710ceac89ce52aea41814f89f63bd15296ffe8ec1b3d70b39cf35c2f80ac137b94397e303f98d295d487c95e1954df1426be16f7ef4a44ea77dbc3a9433ce1751ce24b2dbfdc85690c99668c8143c898844bfc2b4dd86d77fa5e282a729ea31b7d1cde6ad0fd7ea93cd67a44b2d707ea4cb0d423df7114a25f7023138391eed077e1dfea8fa5450d75ad36c4bb632b4c759bf16f1e051d223e5121311695921af709e8fe3e6872eb7e7966f2416db61177ba38f71e1401d8b6685ad1160d01e53c3e7ab45dd42123c0d315622b3068c5949c28862bc972bd89f2ef72fafb7f74cb861e1bc2eb0b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WE</category>
      </categories>
      <tags>
        <tag>WE</tag>
      </tags>
  </entry>
  <entry>
    <title>人间食话（一）</title>
    <url>/2021/02/01/%E4%BA%BA%E9%97%B4%E9%A3%9F%E8%AF%9D%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="人间食话——梁实秋"><a href="#人间食话——梁实秋" class="headerlink" title="人间食话——梁实秋"></a>人间食话——梁实秋</h2><h3 id="人间食话（一）"><a href="#人间食话（一）" class="headerlink" title="人间食话（一）"></a>人间食话（一）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.我第一次吃西施舌是在青岛顺兴楼席上，一大碗清汤，浮着一层尖尖的白白的东西，初不知为何物，主人曰是乃西施舌，含在口中有滑嫩柔软的感觉，尝试之下果然名不虚传，但觉未免唐突西施。高汤汆西施舌，盖仅取其舌状之水管部分。若郁达夫所谓“长圆的蚌肉”，显系整个的西施舌之软体全入釜中。————选自《西施舌》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2.一九二六年冬，某日吴梅先生宴东南大学同仁于南京北万全，予亦叨陪。席间上清蒸火腿一色，盛以高大瓷盘，取火腿最精部分，切成半寸见方高寸许之小块，二三十块矗立于盘中，纯由醇酿花雕蒸制熟透，味之鲜美无与伦比。先生微酡，击案高歌，盛会难忘，于今已有半个世纪有余。——《火腿》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.有人告诉我，整只火腿煮熟是有诀窍的。法以整只火腿浸泡水中三数日，每日换水一二次，然后刮磨表面油腻，然后用凿子挖出其中的骨头（这层手续不易），然后用麻绳紧紧捆绑，下锅煮沸二十分钟，然后以微火煮两小时，然后再大火煮沸，取出冷却即可使用——《火腿》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4.醋溜鱼当然是汁里加醋，但不宜加多，可以加少许酱油，亦不能加多。汁不要多，也不要浓，更不要油，要清清淡淡，微微透明。——《醋溜鱼》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5.北平烤羊肉以前门肉市正阳楼为最有名，主要的是工料细致，无论是上脑、黄瓜条、三叉、大肥片，都切得飞薄，切肉的师傅就在柜台近处表演他的刀法，一块肉用一块布蒙盖着，一手按着肉，一手切，刀法利落。肉不是电冰柜里的冻肉（从前没有电冰柜），就是冬寒天冻，肉还是软软的，没有手艺是切不好的。——《烤羊肉》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6.正阳楼的烧饼是一绝，薄薄的两层皮，一面粘芝麻，打开来会冒一股滚烫的热气，中间可以塞进一大箸子烤肉，咬上去，软。——《烤羊肉》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">7.自从宣外的老便宜坊关张以后，要以东城的金鱼胡同口的宝华春为后起之秀，楼下门市，楼上小楼一角最是吃烤鸭的好地方。在家里，打一个电话，宝华春就会派一个小利巴，用保温的铅铁桶送来一只才出炉的烤鸭，油淋林的，烫手热的。附带着他还管代蒸荷叶饼葱酱之类。他在席旁小桌上当众片鸭，手艺不错，讲究片得薄，每一片有皮有油有肉，随后一盘瘦肉，最后是鸭头鸭尖。大功告成。——《烧鸭》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8.细嫩猪肉一大块，七分瘦三分肥，不可有些许筋络纠结于其间。切割之际最要注意，不可切的七歪八斜，亦不可剁成碎泥，其秘诀是“多切少斩”。挨着刀切成碎丁，越碎越好，然后略为斩剁——《狮子头》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9.鱼剖为两面，取其一面，在表面上斜着纵横细切而不切断。入热油炸之，不须裹面糊，可裹芡粉，炸到微黄，鱼肉一块块地裂开，看样子就引人入胜，撒上花椒盐上桌。两做鱼的另一半酱汁，比较简单，整块的鱼嫩熟之后浇上酱汁即可，唯汁宜稠而不黏，咸而不甜。要撒姜末，不需别的佐料。——《两做鱼》</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.豫菜以开封为中心，洛阳亦差甚颉颃。到豫菜馆吃饭，柜上先敬上一碗开口汤，汤清而味美。——《两做鱼》</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>《人间食话》——梁实秋</category>
      </categories>
      <tags>
        <tag>《人间食话》——梁实秋</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你搭建个人博客</title>
    <url>/2021/05/25/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo搭建自己的静态博客"><a href="#hexo搭建自己的静态博客" class="headerlink" title="hexo搭建自己的静态博客"></a>hexo搭建自己的静态博客</h1><p>一、软件准备<br>1.Git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.官方下载网址:&lt;https://git-scm.com/&gt;</span><br><span class="line">2.Git安装:&lt;https://www.cnblogs.com/ximiaomiao/p/7140456.html&gt;</span><br><span class="line">3.Git配置:&lt;https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html&gt;</span><br></pre></td></tr></table></figure>
<p>2.Note.js</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.官方下载网址:&lt;https://nodejs.org/en/&gt;</span><br></pre></td></tr></table></figure>
<p>3.Github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.官网:&lt;https://github.com/&gt;</span><br><span class="line">    在这里注册自己的github账号</span><br></pre></td></tr></table></figure>
<p>二、安装过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.note安装</span><br><span class="line">    按照安装过程依次点击即可，安装过程很简单。</span><br><span class="line">2.安装git</span><br><span class="line">    按照网上的安装方式进行安装就可以了（参考上述网址）</span><br><span class="line">3. 检测node安装是否成功</span><br><span class="line">    node -v（返回版本号）</span><br><span class="line">    npm -v（返回版本号）</span><br><span class="line">4.安装淘宝镜像源</span><br><span class="line">    npm install -g cnpm –registry=https://registry.npm.taobao.org</span><br><span class="line">    检测 cnpm（返回cnpm的信息） cnpm -v（返回cnpm的版本信息）</span><br><span class="line">5.安装hexo（如果失败重新来过就可以了）</span><br><span class="line">    cnpm install -g hexo-cli</span><br><span class="line">    检测：hexo -v</span><br><span class="line">        （返回hexo的版本信息）</span><br></pre></td></tr></table></figure>
<p>三、初始化操作过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.在本地建立blog文件夹</span><br><span class="line">    进入Git页面</span><br><span class="line">    <span class="built_in">pwd</span> （查询目录所在位置）</span><br><span class="line">    mkdir Blog （在目录下建立文件夹Blog）</span><br><span class="line">（如果在以后的操作过程中出现问题无法解决就把这个文件夹删掉直接重新来过就可以了）</span><br><span class="line">    <span class="built_in">cd</span> Blog/ （进入Blog文件夹）</span><br><span class="line">    <span class="built_in">pwd</span> （检测是否进入Blog文件夹）</span><br><span class="line">*以上操作即为创建一个blog文件夹，并在该文件夹中打开git 执行<span class="built_in">cd</span> Blog 可以直接操作</span><br><span class="line">2.初始化Hexo博客</span><br><span class="line">    hexo init （即：初始化hexo 博客）</span><br><span class="line">    hexo s （启动hexo） 这样就可以在本地4000端口查看自己的网站了</span><br></pre></td></tr></table></figure>
<p>四、将hexo博客远程部署到Github上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.绑定SSH到github中</span><br><span class="line">    首先将自己电脑的SSH密钥绑定到自己的Github中，并使用git对其进行操作</span><br><span class="line">    打开自己的github账号，点击右上角头像，进入setting页面。</span><br><span class="line">    在有导航找到SSH and GPG keys 选项。</span><br><span class="line">    点击 New SSH key 添加你自己的ssh</span><br><span class="line">    参考网址:&lt;https://blog.csdn.net/hc_ttxs/article/details/79375788&gt;</span><br><span class="line">    *绑定成功后:然后再github中按照 自己的昵称+.github.io 建立一个仓库（repository）（例：availablerookie.github.io）</span><br><span class="line">2.在Blog目录下安装一个hexo部署插件</span><br><span class="line">    cnpm install –save hexo-deployer-git</span><br><span class="line">    找到Blog文件中的 _config.yml 文件，使用编译器打开，可使用 IntelliJ IDEA打开</span><br><span class="line">    找到这部分代码，（原始的是没有repo，和branch的，而且<span class="built_in">type</span>后面也没有东西）</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/05/25/I1bUuzdTrxfBSFQ.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.对这段代码进行更改</span><br><span class="line"></span><br><span class="line">    <span class="built_in">type</span>: 一个名字，建议写成git方便识别</span><br><span class="line"></span><br><span class="line">    repo: repository仓库地址 将刚刚新建的github仓库地址复制到这里就可以了</span><br><span class="line"></span><br><span class="line">    branch: 分支这里设置管理员 master</span><br><span class="line"></span><br><span class="line">4.更改以后进行保存</span><br><span class="line">5.然后再Git里面输入 hexo d 将本地文件部署到github新建的仓库中</span><br><span class="line">6.然后通过访问 https://+自己的仓库名 就可以访问部署到github上的blog了</span><br><span class="line">（例：https://availablerookie.github.io）</span><br></pre></td></tr></table></figure>
<p>五、为hexo博客更换主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.在Hexo官网中的主题页面选择自己喜欢的主题并下载。</span><br><span class="line">2.找到Blog文件中的 _config.yml 文件，使用编译器打开，可使用IntelliJ IDEA 打开</span><br><span class="line">    找到这部分代码（即theme）</span><br><span class="line">    将冒号后面的内容改为刚刚新建的你所选择的主题名称</span><br><span class="line">3.hexo clean 清除数据库之类</span><br><span class="line">  hexo g 生成静态网站</span><br><span class="line">  hexo s 在本地4000端口查看</span><br><span class="line">  hexo d 将现在的文件部署到github中</span><br><span class="line"></span><br><span class="line">***这样就实现了主题的更改</span><br></pre></td></tr></table></figure>
<p>六、主题魔改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在各大程序员网站上按照自己的爱好搜索魔改教程</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>肺栓塞项目代码杂记(一)</title>
    <url>/2021/05/27/%E8%82%BA%E6%A0%93%E5%A1%9E%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/05/27/742O8YVxl5zpkRT.jpg"><br>1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Pytorch中load和load_state_dict区别</span><br><span class="line"></span><br><span class="line">torch.load</span><br><span class="line">加载的是训练好的模型</span><br><span class="line">例如：torch.load(<span class="string">&#x27;ad.pth&#x27;</span>)</span><br><span class="line">load_state_dict</span><br><span class="line">是net的一个方法，是将torch.load加载出来的数据加载到net中</span><br><span class="line"></span><br><span class="line">项目：cnn5.load_state_dict(torch.load(filepath))</span><br></pre></td></tr></table></figure>
<p>2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnn5 = torch.nn.DataParallel(cnn5)</span><br><span class="line">单机多GPU使用dataparallel进行加速运算</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/05/27/rR6ION1tsuTy3wn.png"><br>3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在训练和测试函数中model.eval()，和model.train()的区别</span><br><span class="line">拿到数据后进行训练，在训练过程中，使用</span><br><span class="line">model.train(）：告诉我们的网络，这个阶段是用来训练的，可以更新参数。</span><br><span class="line">训练完成后进行预测，在预测过程中，使用</span><br><span class="line">model.eval() ： 告诉我们的网络，这个阶段是用来测试的，于是模型的参数在该阶段不进行更新。</span><br></pre></td></tr></table></figure>
<p>4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">enumerate就是枚举的意思，把元素一个个列举出来，第一个是什么，第二个是什么，所以他返回的是元素以及对应的索引。</span><br><span class="line">line = [1,2,3,4,5,6,7,8,9]</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(line):</span><br><span class="line">    <span class="built_in">print</span>(i,j)</span><br><span class="line"><span class="comment">#以下是输出结果</span></span><br><span class="line">0 1</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">6 7</span><br><span class="line">7 8</span><br><span class="line">8 9</span><br><span class="line"><span class="comment">#eg2:</span></span><br><span class="line">line = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(line):</span><br><span class="line">    <span class="built_in">print</span>(i,j)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line">0 a</span><br><span class="line">1 b</span><br><span class="line">2 c</span><br><span class="line">3 d</span><br><span class="line">4 e</span><br></pre></td></tr></table></figure>
<p>5</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exists是“存在”的意思，所以顾名思义，os.path.exists()就是判断括号里的文件是否存在的意思，括号内的可以是文件路径。</span><br><span class="line">输入代码： </span><br><span class="line">import os</span><br><span class="line">path = os.path.exists(<span class="string">&#x27;user.py&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line">输出结果： </span><br><span class="line">True</span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br><span class="line">如果不存在，返回的则是FALSE。</span><br></pre></td></tr></table></figure>
<p>6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">path1 = os.path.dirname(__file__)  </span><br><span class="line"><span class="built_in">print</span>(path1)<span class="comment">#获取当前运行脚本的绝对路径</span></span><br></pre></td></tr></table></figure>
<p>7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">os.makedirs() 方法用于递归创建目录。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>任务记录</category>
      </categories>
      <tags>
        <tag>任务记录</tag>
      </tags>
  </entry>
</search>
